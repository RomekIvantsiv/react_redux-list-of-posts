{"version":3,"sources":["store/index.ts","api/api.ts","store/selectors.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["setPosts","createAction","setUsers","setCurrentPostId","setCurrentPost","setComments","reducer","createReducer","posts","users","currentPostId","currentPost","comments","builder","addCase","state","action","payload","store","configureStore","BASE_URL","getPosts","a","fetch","response","json","getUsers","getUserPosts","userId","getPostDetails","postId","console","log","getPostComments","deleteComment","commentId","method","addComment","obj","body","JSON","stringify","headers","deletePost","getPostsSelector","getUsersSelector","getCurrentPostIdSelector","getCurrentPostSelector","getCommentsSelector","PostsList","dispatch","useDispatch","useSelector","useEffect","loadPostsFromServer","postsFromServer","handlePostDelete","className","map","post","id","type","onClick","String","NewCommentForm","useState","name","setName","email","setEmail","setBody","currentPostID","handleFormSubmit","event","preventDefault","newComment","commentsToPost","onSubmit","placeholder","value","onChange","target","PostDetails","isCommentsVisible","setIsCommentsVisible","loadPostDetails","postDetailsFromServer","handleDeleteButton","newComments","title","status","comment","App","currentUserId","setCurrentUser","loadUsersFromServer","usersFromServer","loadUserPosts","slice","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.673d40cf.chunk.js","sourcesContent":["import {\n  configureStore,\n  createReducer,\n  createAction,\n} from '@reduxjs/toolkit';\nimport {\n  Post,\n  State,\n  User,\n  Comment,\n} from '../react-app-env';\n\nexport const initialState: State = {\n  posts: [],\n  users: [],\n  currentPostId: '',\n  currentPost: null,\n  comments: null,\n};\n\nexport const setPosts = createAction<Post[]>('SET_POSTS');\nexport const setUsers = createAction<User[]>('SET_USERS');\nexport const setCurrentPostId = createAction<string>('SET_CURRENT_POST_ID');\nexport const setCurrentPost = createAction<Post>('SET_CURRENT_POST');\nexport const setComments = createAction<Comment[]>('SET_COMMENTS');\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder.addCase(setPosts, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.posts = action.payload;\n  });\n  builder.addCase(setUsers, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.users = action.payload;\n  });\n  builder.addCase(setCurrentPostId, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.currentPostId = action.payload;\n  });\n  builder.addCase(setCurrentPost, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.currentPost = action.payload;\n  });\n  builder.addCase(setComments, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.comments = action.payload;\n  });\n});\n\nexport const store = configureStore({ reducer });\n","/* eslint-disable consistent-return */\nimport { NewComment } from '../react-app-env';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getPosts = async () => {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n};\n\nexport const getUsers = async () => {\n  const response = await fetch(`${BASE_URL}/users/`);\n\n  return response.json();\n};\n\nexport const getUserPosts = async (userId: string) => {\n  let response;\n\n  if (userId === '0') {\n    response = await fetch(`${BASE_URL}/posts/`);\n  } else {\n    response = await fetch(`${BASE_URL}/posts/?userId=${userId}`);\n  }\n\n  return response.json();\n};\n\nexport const getPostDetails = async (postId: number) => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n    return await response.json();\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n};\n\nexport const getPostComments = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n};\n\nexport const deleteComment = async (commentId: number) => {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' });\n\n  return response.json();\n};\n\nexport const addComment = async (obj: NewComment) => {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify(obj),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return response.json();\n};\n\nexport const deletePost = async (postId: number) => {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`, { method: 'DELETE' });\n\n  return response.json();\n};\n","import { State } from '../react-app-env';\n\nexport const getPostsSelector = (state: State) => state.posts;\nexport const getUsersSelector = (state: State) => state.users;\n\nexport const getCurrentPostIdSelector = (state: State) => state.currentPostId;\n\nexport const getCurrentPostSelector = (state: State) => state.currentPost;\nexport const getCommentsSelector = (state: State) => state.comments;\n","import React, { useEffect } from 'react';\nimport './PostsList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deletePost, getPosts } from '../../api/api';\nimport {\n  getCurrentPostIdSelector,\n  getPostsSelector,\n} from '../../store/selectors';\nimport { setCurrentPostId, setPosts } from '../../store';\n\nexport const PostsList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const posts = useSelector(getPostsSelector);\n  const currentPostId = useSelector(getCurrentPostIdSelector);\n\n  useEffect(() => {\n    const loadPostsFromServer = async () => {\n      const postsFromServer = await getPosts();\n\n      dispatch(setPosts(postsFromServer));\n    };\n\n    loadPostsFromServer();\n  }, []);\n\n  const handlePostDelete = async (postId: number) => {\n    await deletePost(postId);\n    const postsFromServer = await getPosts();\n\n    dispatch(setPosts(postsFromServer));\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\" data-cy=\"postDetails\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]:`}</b>\n              {post.body}\n            </div>\n            {post.id === +currentPostId\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    dispatch(setCurrentPostId(''));\n                  }}\n                >\n                  Close\n                </button>\n              )\n              : (\n\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => {\n                    dispatch(setCurrentPostId(String(post.id)));\n                  }}\n                >\n                  Open\n                </button>\n              )}\n            <button\n              type=\"button\"\n              className=\"PostsList__button button__remove button \"\n              onClick={() => {\n                handlePostDelete(post.id);\n              }}\n            >\n              Delete\n            </button>\n\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addComment, getPostComments } from '../../api/api';\nimport { NewComment } from '../../react-app-env';\nimport { setComments } from '../../store';\nimport {\n  getCurrentPostIdSelector,\n} from '../../store/selectors';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm: React.FC = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const dispatch = useDispatch();\n  const currentPostID = useSelector(getCurrentPostIdSelector);\n\n  const clearInputs = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleFormSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newComment: NewComment = {\n      name,\n      email,\n      body,\n      postId: +currentPostID,\n    };\n\n    await addComment(newComment);\n    const commentsToPost = await getPostComments(+currentPostID);\n\n    dispatch(setComments(commentsToPost));\n    clearInputs();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleFormSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={({ target }) => {\n            setName(target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={({ target }) => {\n            setEmail(target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={({ target }) => {\n            setBody(target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteComment, getPostComments, getPostDetails } from '../../api/api';\nimport { setComments, setCurrentPost } from '../../store';\nimport {\n  getCurrentPostSelector,\n  getCurrentPostIdSelector,\n  getCommentsSelector,\n} from '../../store/selectors';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails: React.FC = () => {\n  const [isCommentsVisible, setIsCommentsVisible] = useState(true);\n\n  const dispatch = useDispatch();\n\n  const currentPostId = useSelector(getCurrentPostIdSelector);\n  const currentPost = useSelector(getCurrentPostSelector);\n  const comments = useSelector(getCommentsSelector);\n\n  useEffect(() => {\n    const loadPostDetails = async () => {\n      const postDetailsFromServer = await getPostDetails(+currentPostId);\n\n      const commentsToPost = await getPostComments(+currentPostId);\n\n      dispatch(setComments(commentsToPost));\n      dispatch(setCurrentPost(postDetailsFromServer));\n    };\n\n    loadPostDetails();\n  }, [currentPostId]);\n\n  const handleDeleteButton = async (commentId: number) => {\n    await deleteComment(commentId);\n\n    const newComments = await getPostComments(+currentPostId);\n\n    dispatch(setComments(newComments));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{currentPost?.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsCommentsVisible(status => !status);\n          }}\n        >\n          {isCommentsVisible\n            ? ('Hide comments')\n            : ('Show comments')}\n        </button>\n        {isCommentsVisible && (\n          <ul className=\"PostDetails__list\" data-cy=\"postDetails\">\n            {comments?.map(comment => (\n              <li key={comment.id} className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    handleDeleteButton(comment.id);\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getCurrentPostIdSelector, getUsersSelector } from './store/selectors';\nimport { getUserPosts, getUsers } from './api/api';\nimport { setPosts, setUsers } from './store';\n\nconst App: React.FC = () => {\n  const [currentUserId, setCurrentUser] = useState('0');\n\n  const dispatch = useDispatch();\n\n  const users = useSelector(getUsersSelector);\n  const currentPostId = useSelector(getCurrentPostIdSelector);\n\n  useEffect(() => {\n    const loadUsersFromServer = async () => {\n      const usersFromServer = await getUsers();\n\n      dispatch(setUsers(usersFromServer));\n    };\n\n    loadUsersFromServer();\n  }, []);\n\n  useEffect(() => {\n    const loadUserPosts = async () => {\n      const postsFromServer = await getUserPosts(currentUserId);\n\n      dispatch(setPosts(postsFromServer));\n    };\n\n    loadUserPosts();\n  }, [currentUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              setCurrentUser(event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.slice(0, 10).map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList />\n        </div>\n\n        {currentPostId && (\n          <div className=\"App__content\">\n            <PostDetails />\n          </div>\n        )}\n\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store';\n\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}